D G "__PCM__" 0 65 ""5.076""
D G "__DEVICE__" 0 65 "628"
D G "__DATE__" 0 65 ""24-ago.-20""
D G "__TIME__" 0 65 ""21:25:11""
D G "_UNICODE" 0 65 ""?""
D G "__EVAL" 0 65 ""?"" "Standard Header file for the PIC16F628A device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 37 ""
v L "value" 2 37 "int8" `54 
f B "set_tris_a" 2 37 "void(int8 value)" `53 
f N "set_tris_b" 2 38 ""
v L "value" 2 38 "int8" `56 
f B "set_tris_b" 2 38 "void(int8 value)" `55 
f N "get_tris_a" 2 39 ""
f B "get_tris_a" 2 39 "int8()" `57 
f N "get_tris_b" 2 40 ""
f B "get_tris_b" 2 40 "int8()" `58 
f N "output_a" 2 41 ""
v L "value" 2 41 "int8" `60 
f B "output_a" 2 41 "void(int8 value)" `59 
f N "output_b" 2 42 ""
v L "value" 2 42 "int8" `62 
f B "output_b" 2 42 "void(int8 value)" `61 
f N "input_a" 2 43 ""
f B "input_a" 2 43 "int8()" `63 
f N "input_b" 2 44 ""
f B "input_b" 2 44 "int8()" `64 
f N "input_change_a" 2 45 ""
f B "input_change_a" 2 45 "int8()" `65 
f N "input_change_b" 2 46 ""
f B "input_change_b" 2 46 "int8()" `66 
f N "port_b_pullups" 2 47 ""
v L "value" 2 47 "int8" `68 
f B "port_b_pullups" 2 47 "void(int8 value)" `67 
f N "input" 2 48 ""
v L "pin" 2 48 "int16" `70 
f B "input" 2 48 "int8(int16 pin)" `69 
f N "input_state" 2 49 ""
v L "pin" 2 49 "int16" `72 
f B "input_state" 2 49 "int8(int16 pin)" `71 
f N "output_low" 2 50 ""
v L "pin" 2 50 "int16" `74 
f B "output_low" 2 50 "void(int16 pin)" `73 
f N "output_high" 2 51 ""
v L "pin" 2 51 "int16" `76 
f B "output_high" 2 51 "void(int16 pin)" `75 
f N "output_toggle" 2 52 ""
v L "pin" 2 52 "int16" `78 
f B "output_toggle" 2 52 "void(int16 pin)" `77 
f N "output_bit" 2 53 ""
v L "pin" 2 53 "int16" `80 
v L "level" 2 53 "int8" `81 
f B "output_bit" 2 53 "void(int16 pin,int8 level)" `79 
f N "output_float" 2 54 ""
v L "pin" 2 54 "int16" `83 
f B "output_float" 2 54 "void(int16 pin)" `82 
f N "output_drive" 2 55 ""
v L "pin" 2 55 "int16" `85 
f B "output_drive" 2 55 "void(int16 pin)" `84  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 59 "40"
d G "PIN_A1" 2 60 "41"
d G "PIN_A2" 2 61 "42"
d G "PIN_A3" 2 62 "43"
d G "PIN_A4" 2 63 "44"
d G "PIN_A5" 2 64 "45"
d G "PIN_A6" 2 65 "46"
d G "PIN_A7" 2 66 "47"
d G "PIN_B0" 2 68 "48"
d G "PIN_B1" 2 69 "49"
d G "PIN_B2" 2 70 "50"
d G "PIN_B3" 2 71 "51"
d G "PIN_B4" 2 72 "52"
d G "PIN_B5" 2 73 "53"
d G "PIN_B6" 2 74 "54"
d G "PIN_B7" 2 75 "55"
d G "FALSE" 2 78 "0"
d G "TRUE" 2 79 "1"
d G "BYTE" 2 81 "int8"
d G "BOOLEAN" 2 82 "int1"
d G "getc" 2 84 "getch"
d G "fgetc" 2 85 "getch"
d G "getchar" 2 86 "getch"
d G "putc" 2 87 "putchar"
d G "fputc" 2 88 "putchar"
d G "fgets" 2 89 "gets"
d G "fputs" 2 90 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 95 ""
f B "restart_cause" 2 95 "int8()" `86 
f N "reset_cpu" 2 96 ""
f B "reset_cpu" 2 96 "void()" `87 
f N "sleep" 2 97 ""
f B "sleep" 2 97 "void()" `88  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 99 "3"
d G "WDT_TIMEOUT" 2 100 "11"
d G "MCLR_FROM_SLEEP" 2 101 "19"
d G "MCLR_FROM_RUN" 2 102 "27"
d G "NORMAL_POWER_UP" 2 103 "25"
d G "BROWNOUT_RESTART" 2 104 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 111 ""
v L "mode" 2 111 "int8" `90 
f B "setup_timer_0" 2 111 "void(int8 mode)" `89 
f N "set_timer0" 2 112 ""
v L "value" 2 112 "int8" `92 
f B "set_timer0" 2 112 "void(int8 value)" `91 
f N "get_timer0" 2 113 ""
f B "get_timer0" 2 113 "int8()" `93 
f N "setup_counters" 2 114 ""
v L "mode" 2 114 "int8" `95 
v L "prescaler" 2 114 "int8" `96 
f B "setup_counters" 2 114 "void(int8 mode,int8 prescaler)" `94 
f N "set_rtcc" 2 115 ""
v L "value" 2 115 "int8" `98 
f B "set_rtcc" 2 115 "void(int8 value)" `97 
f N "get_rtcc" 2 116 ""
f B "get_rtcc" 2 116 "int8()" `99  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 118 "0"
d G "T0_EXT_L_TO_H" 2 119 "32"
d G "T0_EXT_H_TO_L" 2 120 "48"
d G "T0_DIV_1" 2 122 "8"
d G "T0_DIV_2" 2 123 "0"
d G "T0_DIV_4" 2 124 "1"
d G "T0_DIV_8" 2 125 "2"
d G "T0_DIV_16" 2 126 "3"
d G "T0_DIV_32" 2 127 "4"
d G "T0_DIV_64" 2 128 "5"
d G "T0_DIV_128" 2 129 "6"
d G "T0_DIV_256" 2 130 "7"
d G "T0_8_BIT" 2 133 "0"
d G "RTCC_INTERNAL" 2 137 "0"
d G "RTCC_EXT_L_TO_H" 2 138 "32"
d G "RTCC_EXT_H_TO_L" 2 139 "48"
d G "RTCC_DIV_1" 2 140 "8"
d G "RTCC_DIV_2" 2 141 "0"
d G "RTCC_DIV_4" 2 142 "1"
d G "RTCC_DIV_8" 2 143 "2"
d G "RTCC_DIV_16" 2 144 "3"
d G "RTCC_DIV_32" 2 145 "4"
d G "RTCC_DIV_64" 2 146 "5"
d G "RTCC_DIV_128" 2 147 "6"
d G "RTCC_DIV_256" 2 148 "7"
d G "RTCC_8_BIT" 2 149 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 160 ""
v L "mode" 2 160 "int16" `101 
f B "setup_wdt" 2 160 "void(int16 mode)" `100 
f N "restart_wdt" 2 161 ""
f B "restart_wdt" 2 161 "void()" `102  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 164 "8"
d G "WDT_36MS" 2 165 "9"
d G "WDT_72MS" 2 166 "10"
d G "WDT_144MS" 2 167 "11"
d G "WDT_288MS" 2 168 "12"
d G "WDT_576MS" 2 169 "13"
d G "WDT_1152MS" 2 170 "14"
d G "WDT_2304MS" 2 171 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 177 ""
v L "mode" 2 177 "int16" `104 
f B "setup_timer_1" 2 177 "void(int16 mode)" `103 
f N "get_timer1" 2 178 ""
f B "get_timer1" 2 178 "int16()" `105 
f N "set_timer1" 2 179 ""
v L "value" 2 179 "int16" `107 
f B "set_timer1" 2 179 "void(int16 value)" `106  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 182 "0"
d G "T1_INTERNAL" 2 183 "0x85"
d G "T1_EXTERNAL" 2 184 "0x87"
d G "T1_EXTERNAL_SYNC" 2 185 "0x83"
d G "T1_CLK_OUT" 2 187 "8"
d G "T1_DIV_BY_1" 2 189 "0"
d G "T1_DIV_BY_2" 2 190 "0x10"
d G "T1_DIV_BY_4" 2 191 "0x20"
d G "T1_DIV_BY_8" 2 192 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 197 ""
v L "mode" 2 197 "int8" `109 
v L "period" 2 197 "int8" `110 
v L "postscale" 2 197 "int8" `111 
f B "setup_timer_2" 2 197 "void(int8 mode,int8 period,int8 postscale)" `108 
f N "get_timer2" 2 198 ""
f B "get_timer2" 2 198 "int8()" `112 
f N "set_timer2" 2 199 ""
v L "value" 2 199 "int8" `114 
f B "set_timer2" 2 199 "void(int8 value)" `113  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 201 "0"
d G "T2_DIV_BY_1" 2 202 "4"
d G "T2_DIV_BY_4" 2 203 "5"
d G "T2_DIV_BY_16" 2 204 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 210 ""
v L "mode" 2 210 "int32" `116 
f B "setup_ccp1" 2 210 "void(int32 mode)" `115 
f N "setup_ccp1" 2 211 ""
v L "mode" 2 211 "int32" `118 
v L "pwm" 2 211 "int8" `119 
f B "setup_ccp1" 2 211 "void(int32 mode,int8 pwm)" `117 
f N "set_pwm1_duty" 2 212 ""
v L "value" 2 212 "int16" `121 
f B "set_pwm1_duty" 2 212 "void(int16 value)" `120  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 214 "0"
d G "CCP_CAPTURE_FE" 2 215 "0x04"
d G "CCP_CAPTURE_RE" 2 216 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 217 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 218 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 219 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 220 "0x09"
d G "CCP_COMPARE_INT" 2 221 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 222 "0x0B"
d G "CCP_PWM" 2 223 "0x0C"
d G "CCP_PWM_PLUS_1" 2 224 "0x1c"
d G "CCP_PWM_PLUS_2" 2 225 "0x2c"
d G "CCP_PWM_PLUS_3" 2 226 "0x3c"
c L "set_pwm1_duty" 2 3 2 "FUNCTION"
f N "setup_uart" 2 233 ""
v L "baud" 2 233 "int32" `126 
f B "setup_uart" 2 233 "void(int32 baud)" `125 
f N "setup_uart" 2 234 ""
v L "baud" 2 234 "int32" `128 
v L "stream" 2 234 "int8" `129 
f B "setup_uart" 2 234 "void(int32 baud,int8 stream)" `127 
f N "setup_uart" 2 235 ""
v L "baud" 2 235 "int32" `131 
v L "stream" 2 235 "int8" `132 
v L "clock" 2 235 "int32" `133 
f B "setup_uart" 2 235 "void(int32 baud,int8 stream,int32 clock)" `130 
f N "set_uart_speed" 2 236 ""
v L "baud" 2 236 "int32" `135 
f B "set_uart_speed" 2 236 "void(int32 baud)" `134 
f N "set_uart_speed" 2 237 ""
v L "baud" 2 237 "int32" `137 
v L "stream" 2 237 "int8" `138 
f B "set_uart_speed" 2 237 "void(int32 baud,int8 stream)" `136 
f N "set_uart_speed" 2 238 ""
v L "baud" 2 238 "int32" `140 
v L "stream" 2 238 "int8" `141 
v L "clock" 2 238 "int32" `142 
f B "set_uart_speed" 2 238 "void(int32 baud,int8 stream,int32 clock)" `139  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 242 "2"
d G "UART_DATA" 2 243 "4"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 247 ""
v L "mode" 2 247 "int32" `144 
f B "setup_comparator" 2 247 "void(int32 mode)" `143  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A2" 2 249 "0xfff04"
d G "A0_A2_A1_A2" 2 250 "0x7ff03"
d G "NC_NC_A1_A2" 2 251 "0x6ff05"
d G "NC_NC_NC_NC" 2 252 "0x0ff07"
d G "A0_VR_A1_VR" 2 253 "0x3ff02"
d G "A3_VR_A2_VR" 2 254 "0xcff0A"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 2 255 "0x7e706"
d G "A3_A2_A1_A2" 2 256 "0xeff09"
d G "CP1_INVERT" 2 257 "0x00010"
d G "CP2_INVERT" 2 258 "0x00020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 265 ""
v L "mode" 2 265 "int8" `148 
f B "setup_vref" 2 265 "void(int8 mode)" `147  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 267 "0xa0"
d G "VREF_HIGH" 2 268 "0x80"
d G "VREF_A2" 2 270 "0x40"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 274 ""
v L "mode" 2 274 "int8" `150 
f B "setup_oscillator" 2 274 "void(int8 mode)" `149  "Constants used in setup_oscillator() are:"
d G "OSC_48KHZ" 2 276 "0"
d G "OSC_4MHZ" 2 277 "8"
c L "setup_oscillator" 2 3 3 "FUNCTION"
f N "abs" 2 283 ""
v L "x" 2 283 "sint8" `152 
f B "abs" 2 283 "sint8(sint8 x)" `151 
f N "abs" 2 284 ""
v L "x" 2 284 "sint16" `154 
f B "abs" 2 284 "sint16(sint16 x)" `153 
f N "abs" 2 285 ""
v L "x" 2 285 "sint32" `156 
f B "abs" 2 285 "sint32(sint32 x)" `155 
f N "abs" 2 286 ""
v L "x" 2 286 "float" `158 
f B "abs" 2 286 "float(float x)" `157 
f N "_mul" 2 287 ""
v L "??65535" 2 287 "int8" `160 
v L "??65535" 2 287 "int8" `161 
f B "_mul" 2 287 "int16(int8 ,int8 )" `159 
f N "_mul" 2 288 ""
v L "??65535" 2 288 "sint8" `163 
v L "??65535" 2 288 "sint8" `164 
f B "_mul" 2 288 "sint16(sint8 ,sint8 )" `162 
f N "_mul" 2 289 ""
v L "??65535" 2 289 "int16" `166 
v L "??65535" 2 289 "int16" `167 
f B "_mul" 2 289 "int32(int16 ,int16 )" `165 
f N "_mul" 2 290 ""
v L "??65535" 2 290 "sint16" `169 
v L "??65535" 2 290 "sint16" `170 
f B "_mul" 2 290 "sint32(sint16 ,sint16 )" `168  "Memory Manipulation Prototypes:"
f N "read_bank" 2 293 ""
v L "bank" 2 293 "int8" `172 
v L "offset" 2 293 "int8" `173 
f B "read_bank" 2 293 "int8(int8 bank,int8 offset)" `171 
f N "write_bank" 2 294 ""
v L "bank" 2 294 "int8" `175 
v L "offset" 2 294 "int8" `176 
v L "value" 2 294 "int8" `177 
f B "write_bank" 2 294 "void(int8 bank,int8 offset,int8 value)" `174 
f N "strcpy" 2 295 ""
v L "dest" 2 295 "*int8" `179 
v L "src" 2 295 "*int8" `180 
f B "strcpy" 2 295 "void(*int8 dest,*int8 src)" `178 
f N "memset" 2 296 ""
v L "destination" 2 296 "*int8" `182 
v L "value" 2 296 "int8" `183 
v L "num" 2 296 "int16" `184 
f B "memset" 2 296 "void(*int8 destination,int8 value,int16 num)" `181 
f N "memcpy" 2 297 ""
v L "destination" 2 297 "*int8" `186 
v L "source" 2 297 "*int8" `187 
v L "num" 2 297 "int16" `188 
f B "memcpy" 2 297 "void(*int8 destination,*int8 source,int16 num)" `185  "String Prototypes:"
f N "toupper" 2 300 ""
v L "cvalue" 2 300 "int8" `190 
f B "toupper" 2 300 "int8(int8 cvalue)" `189 
f N "tolower" 2 301 ""
v L "cvalue" 2 301 "int8" `192 
f B "tolower" 2 301 "int8(int8 cvalue)" `191 
f N "sprintf" 2 302 ""
v L "string" 2 302 "*int8" `194 
v L "cstring" 2 302 "*int8" `195 
f B "sprintf" 2 302 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `193  "Data Manipulators Prototypes:"
f N "shift_left" 2 305 ""
v L "address" 2 305 "*int8" `198 
v L "bytes" 2 305 "int8" `199 
v L "value" 2 305 "int8" `200 
f B "shift_left" 2 305 "int8(*int8 address,int8 bytes,int8 value)" `197 
f N "shift_right" 2 306 ""
v L "address" 2 306 "*int8" `202 
v L "bytes" 2 306 "int8" `203 
v L "value" 2 306 "int8" `204 
f B "shift_right" 2 306 "int8(*int8 address,int8 bytes,int8 value)" `201 
f N "rotate_left" 2 307 ""
v L "address" 2 307 "*int8" `206 
v L "bytes" 2 307 "int8" `207 
f B "rotate_left" 2 307 "void(*int8 address,int8 bytes)" `205 
f N "rotate_right" 2 308 ""
v L "address" 2 308 "*int8" `209 
v L "bytes" 2 308 "int8" `210 
f B "rotate_right" 2 308 "void(*int8 address,int8 bytes)" `208 
f N "swap" 2 309 ""
v L "value" 2 309 "int8" `212 
f B "swap" 2 309 "void(int8 value)" `211 
f N "make8" 2 310 ""
v L "var" 2 310 "int16" `214 
v L "offset" 2 310 "int8" `215 
f B "make8" 2 310 "int8(int16 var,int8 offset)" `213 
f N "make8" 2 311 ""
v L "var" 2 311 "int32" `217 
v L "offset" 2 311 "int8" `218 
f B "make8" 2 311 "int8(int32 var,int8 offset)" `216 
f N "make16" 2 312 ""
v L "varhigh" 2 312 "int8" `220 
v L "varlow" 2 312 "int8" `221 
f B "make16" 2 312 "int16(int8 varhigh,int8 varlow)" `219 
f N "make32" 2 313 ""
v L "var1" 2 313 "int16" `223 
f B "make32" 2 313 "int32(int16 var1)" `222 
f N "make32" 2 314 ""
v L "var1" 2 314 "int16" `225 
v L "var2" 2 314 "int16" `226 
f B "make32" 2 314 "int32(int16 var1,int16 var2)" `224 
f N "make32" 2 315 ""
v L "var1" 2 315 "int16" `228 
v L "var2" 2 315 "int8" `229 
f B "make32" 2 315 "int32(int16 var1,int8 var2)" `227 
f N "make32" 2 316 ""
v L "var1" 2 316 "int16" `231 
v L "var2" 2 316 "int8" `232 
v L "var3" 2 316 "int8" `233 
f B "make32" 2 316 "int32(int16 var1,int8 var2,int8 var3)" `230 
f N "make32" 2 317 ""
v L "var1" 2 317 "int8" `235 
f B "make32" 2 317 "int32(int8 var1)" `234 
f N "make32" 2 318 ""
v L "var1" 2 318 "int8" `237 
v L "var2" 2 318 "int8" `238 
f B "make32" 2 318 "int32(int8 var1,int8 var2)" `236 
f N "make32" 2 319 ""
v L "var1" 2 319 "int8" `240 
v L "var2" 2 319 "int8" `241 
v L "var3" 2 319 "int8" `242 
f B "make32" 2 319 "int32(int8 var1,int8 var2,int8 var3)" `239 
f N "make32" 2 320 ""
v L "var1" 2 320 "int8" `244 
v L "var2" 2 320 "int8" `245 
v L "var3" 2 320 "int8" `246 
v L "var4" 2 320 "int8" `247 
f B "make32" 2 320 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `243 
f N "make32" 2 321 ""
v L "var1" 2 321 "int8" `249 
v L "var2" 2 321 "int16" `250 
f B "make32" 2 321 "int32(int8 var1,int16 var2)" `248 
f N "make32" 2 322 ""
v L "var1" 2 322 "int8" `252 
v L "var2" 2 322 "int16" `253 
v L "var3" 2 322 "int8" `254 
f B "make32" 2 322 "int32(int8 var1,int16 var2,int8 var3)" `251 
f N "make32" 2 323 ""
v L "var1" 2 323 "int8" `256 
v L "var2" 2 323 "int8" `257 
v L "var3" 2 323 "int16" `258 
f B "make32" 2 323 "int32(int8 var1,int8 var2,int16 var3)" `255 
f N "bit_set" 2 324 ""
v L "var" 2 324 "int8" `260 
v L "bit" 2 324 "int8" `261 
f B "bit_set" 2 324 "void(int8 var,int8 bit)" `259 
f N "bit_set" 2 325 ""
v L "var" 2 325 "int16" `263 
v L "bit" 2 325 "int8" `264 
f B "bit_set" 2 325 "void(int16 var,int8 bit)" `262 
f N "bit_set" 2 326 ""
v L "var" 2 326 "int32" `266 
v L "bit" 2 326 "int8" `267 
f B "bit_set" 2 326 "void(int32 var,int8 bit)" `265 
f N "bit_clear" 2 327 ""
v L "var" 2 327 "int8" `269 
v L "bit" 2 327 "int8" `270 
f B "bit_clear" 2 327 "void(int8 var,int8 bit)" `268 
f N "bit_clear" 2 328 ""
v L "var" 2 328 "int16" `272 
v L "bit" 2 328 "int8" `273 
f B "bit_clear" 2 328 "void(int16 var,int8 bit)" `271 
f N "bit_clear" 2 329 ""
v L "var" 2 329 "int32" `275 
v L "bit" 2 329 "int8" `276 
f B "bit_clear" 2 329 "void(int32 var,int8 bit)" `274 
f N "bit_test" 2 330 ""
v L "var" 2 330 "int8" `278 
v L "bit" 2 330 "int8" `279 
f B "bit_test" 2 330 "int8(int8 var,int8 bit)" `277 
f N "bit_test" 2 331 ""
v L "var" 2 331 "int16" `281 
v L "bit" 2 331 "int8" `282 
f B "bit_test" 2 331 "int8(int16 var,int8 bit)" `280 
f N "bit_test" 2 332 ""
v L "var" 2 332 "int32" `284 
v L "bit" 2 332 "int8" `285 
f B "bit_test" 2 332 "int8(int32 var,int8 bit)" `283  "#use delay() Prototypes:"
f N "delay_cycles" 2 335 ""
v L "count" 2 335 "int8" `287 
f B "delay_cycles" 2 335 "void(int8 count)" `286 
f N "delay_ms" 2 336 ""
v L "time" 2 336 "int16" `289 
f B "delay_ms" 2 336 "void(int16 time)" `288 
f N "delay_us" 2 337 ""
v L "time" 2 337 "int16" `291 
f B "delay_us" 2 337 "void(int16 time)" `290  "#use rs232() Prototypes:"
f N "putchar" 2 340 ""
v L "cdata" 2 340 "int8" `293 
f B "putchar" 2 340 "void(int8 cdata)" `292 
f N "putchar" 2 341 ""
v L "cdata" 2 341 "int8" `295 
v L "stream" 2 341 "int8" `296 
f B "putchar" 2 341 "void(int8 cdata,int8 stream)" `294 
f N "puts" 2 342 ""
v L "string" 2 342 "*int8" `298 
f B "puts" 2 342 "void(*int8 string)" `297 
f N "puts" 2 343 ""
v L "string" 2 343 "*int8" `300 
v L "stream" 2 343 "int8" `301 
f B "puts" 2 343 "void(*int8 string,int8 stream)" `299 
f N "getch" 2 344 ""
f B "getch" 2 344 "int8()" `302 
f N "getch" 2 345 ""
v L "stream" 2 345 "int8" `304 
f B "getch" 2 345 "int8(int8 stream)" `303 
f N "gets" 2 346 ""
v L "string" 2 346 "*int8" `306 
f B "gets" 2 346 "void(*int8 string)" `305 
f N "gets" 2 347 ""
v L "string" 2 347 "*int8" `308 
v L "stream" 2 347 "int8" `309 
f B "gets" 2 347 "void(*int8 string,int8 stream)" `307 
f N "kbhit" 2 348 ""
f B "kbhit" 2 348 "int8()" `310 
f N "kbhit" 2 349 ""
v L "stream" 2 349 "int8" `312 
f B "kbhit" 2 349 "int8(int8 stream)" `311 
f N "printf" 2 350 ""
v L "string" 2 350 "*int8" `314 
f B "printf" 2 350 "void(*int8 string,*int8 _VA_LIST)" `313 
f N "fprintf" 2 351 ""
v L "stream" 2 351 "int8" `317 
v L "string" 2 351 "*int8" `318 
f B "fprintf" 2 351 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `316 
f N "putc_send" 2 352 ""
f B "putc_send" 2 352 "void()" `320 
f N "fputc_send" 2 353 ""
v L "stream" 2 353 "int8" `322 
f B "fputc_send" 2 353 "void(int8 stream)" `321 
f N "rcv_buffer_full" 2 354 ""
f B "rcv_buffer_full" 2 354 "int8()" `323 
f N "rcv_buffer_full" 2 355 ""
v L "stream" 2 355 "int8" `325 
f B "rcv_buffer_full" 2 355 "int8(int8 stream)" `324 
f N "rcv_buffer_bytes" 2 356 ""
f B "rcv_buffer_bytes" 2 356 "int16()" `326 
f N "rcv_buffer_bytes" 2 357 ""
v L "stream" 2 357 "int8" `328 
f B "rcv_buffer_bytes" 2 357 "int16(int8 stream)" `327 
f N "tx_buffer_full" 2 358 ""
f B "tx_buffer_full" 2 358 "int8()" `329 
f N "tx_buffer_full" 2 359 ""
v L "stream" 2 359 "int8" `331 
f B "tx_buffer_full" 2 359 "int8(int8 stream)" `330 
f N "tx_buffer_bytes" 2 360 ""
f B "tx_buffer_bytes" 2 360 "int16()" `332 
f N "tx_buffer_bytes" 2 361 ""
v L "stream" 2 361 "int8" `334 
f B "tx_buffer_bytes" 2 361 "int16(int8 stream)" `333  "#use i2c() Prototypes:"
f N "i2c_read" 2 364 ""
f B "i2c_read" 2 364 "int8()" `335 
f N "i2c_read" 2 365 ""
v L "ack" 2 365 "int8" `337 
f B "i2c_read" 2 365 "int8(int8 ack)" `336 
f N "i2c_read" 2 366 ""
v L "stream" 2 366 "int8" `339 
v L "ack" 2 366 "int8" `340 
f B "i2c_read" 2 366 "int8(int8 stream,int8 ack)" `338 
f N "i2c_write" 2 367 ""
v L "data" 2 367 "int8" `342 
f B "i2c_write" 2 367 "int8(int8 data)" `341 
f N "i2c_write" 2 368 ""
v L "stream" 2 368 "int8" `344 
v L "data" 2 368 "int8" `345 
f B "i2c_write" 2 368 "int8(int8 stream,int8 data)" `343 
f N "i2c_start" 2 369 ""
f B "i2c_start" 2 369 "void()" `346 
f N "i2c_start" 2 370 ""
v L "stream" 2 370 "int8" `348 
f B "i2c_start" 2 370 "void(int8 stream)" `347 
f N "i2c_start" 2 371 ""
v L "stream" 2 371 "int8" `350 
v L "restart" 2 371 "int8" `351 
f B "i2c_start" 2 371 "void(int8 stream,int8 restart)" `349 
f N "i2c_stop" 2 372 ""
f B "i2c_stop" 2 372 "void()" `352 
f N "i2c_stop" 2 373 ""
v L "stream" 2 373 "int8" `354 
f B "i2c_stop" 2 373 "void(int8 stream)" `353 
f N "i2c_isr_state" 2 374 ""
f B "i2c_isr_state" 2 374 "int8()" `355 
f N "i2c_slaveaddr" 2 375 ""
v L "addr" 2 375 "int8" `357 
f B "i2c_slaveaddr" 2 375 "void(int8 addr)" `356 
f N "i2c_slaveaddr" 2 376 ""
v L "stream" 2 376 "int8" `359 
v L "addr" 2 376 "int8" `360 
f B "i2c_slaveaddr" 2 376 "void(int8 stream,int8 addr)" `358 
f N "i2c_poll" 2 377 ""
f B "i2c_poll" 2 377 "int8()" `361 
f N "i2c_poll" 2 378 ""
v L "stream" 2 378 "int8" `363 
f B "i2c_poll" 2 378 "int8(int8 stream)" `362 
f N "i2c_init" 2 379 ""
v L "baud" 2 379 "int32" `365 
f B "i2c_init" 2 379 "void(int32 baud)" `364 
f N "i2c_init" 2 380 ""
v L "stream" 2 380 "int8" `367 
v L "baud" 2 380 "int32" `368 
f B "i2c_init" 2 380 "void(int8 stream,int32 baud)" `366 
f N "i2c_transfer" 2 381 ""
v L "address" 2 381 "int8" `370 
v L "wData" 2 381 "*int8" `371 
v L "wCount" 2 381 "int8" `372 
f B "i2c_transfer" 2 381 "void(int8 address,*int8 wData,int8 wCount)" `369 
f N "i2c_transfer" 2 382 ""
v L "address" 2 382 "int8" `374 
v L "wData" 2 382 "*int8" `375 
v L "wCount" 2 382 "int8" `376 
v L "rData" 2 382 "*int8" `377 
v L "rCount" 2 382 "*int8" `378 
f B "i2c_transfer" 2 382 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `373 
f N "i2c_transfer" 2 383 ""
v L "stream" 2 383 "int8" `380 
v L "address" 2 383 "int8" `381 
v L "wData" 2 383 "*int8" `382 
v L "wCount" 2 383 "int8" `383 
f B "i2c_transfer" 2 383 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `379 
f N "i2c_transfer" 2 384 ""
v L "stream" 2 384 "int8" `385 
v L "address" 2 384 "int8" `386 
v L "wData" 2 384 "*int8" `387 
v L "wCount" 2 384 "int8" `388 
v L "rData" 2 384 "*int8" `389 
v L "rCount" 2 384 "*int8" `390 
f B "i2c_transfer" 2 384 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `384 
f N "i2c_transfer_out" 2 385 ""
v L "address" 2 385 "int8" `392 
v L "wData" 2 385 "*int8" `393 
v L "wCount" 2 385 "int8" `394 
f B "i2c_transfer_out" 2 385 "void(int8 address,*int8 wData,int8 wCount)" `391 
f N "i2c_transfer_out" 2 386 ""
v L "stream" 2 386 "int8" `396 
v L "address" 2 386 "int8" `397 
v L "wData" 2 386 "*int8" `398 
v L "wCount" 2 386 "int8" `399 
f B "i2c_transfer_out" 2 386 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `395 
f N "i2c_transfer_in" 2 387 ""
v L "address" 2 387 "int8" `401 
v L "rData" 2 387 "*int8" `402 
v L "rCount" 2 387 "int8" `403 
f B "i2c_transfer_in" 2 387 "void(int8 address,*int8 rData,int8 rCount)" `400 
f N "i2c_transfer_in" 2 388 ""
v L "stream" 2 388 "int8" `405 
v L "address" 2 388 "int8" `406 
v L "rData" 2 388 "*int8" `407 
v L "rCount" 2 388 "int8" `408 
f B "i2c_transfer_in" 2 388 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `404  "#use spi() Prototypes:"
f N "spi_xfer" 2 391 ""
f B "spi_xfer" 2 391 "int8()" `409 
f N "spi_xfer" 2 392 ""
f G "spi_xfer" 2 392 "int16(int8 data)" `410 
f N "spi_xfer" 2 393 ""
f G "spi_xfer" 2 393 "int32(int8 data)" `410 
f N "spi_xfer" 2 394 ""
v L "data" 2 394 "int8" `411 
f B "spi_xfer" 2 394 "int8(int8 data)" `410 
f N "spi_xfer" 2 395 ""
v L "data" 2 395 "int16" `413 
f B "spi_xfer" 2 395 "int16(int16 data)" `412 
f N "spi_xfer" 2 396 ""
v L "data" 2 396 "int32" `415 
f B "spi_xfer" 2 396 "int32(int32 data)" `414 
f N "spi_xfer" 2 397 ""
v L "stream" 2 397 "int8" `417 
v L "data" 2 397 "int8" `418 
f B "spi_xfer" 2 397 "int8(int8 stream,int8 data)" `416 
f N "spi_xfer" 2 398 ""
v L "stream" 2 398 "int8" `420 
v L "data" 2 398 "int16" `421 
f B "spi_xfer" 2 398 "int16(int8 stream,int16 data)" `419 
f N "spi_xfer" 2 399 ""
v L "stream" 2 399 "int8" `423 
v L "data" 2 399 "int32" `424 
f B "spi_xfer" 2 399 "int32(int8 stream,int32 data)" `422 
f N "spi_xfer" 2 400 ""
v L "stream" 2 400 "int8" `426 
v L "data" 2 400 "int8" `427 
v L "bits" 2 400 "int8" `428 
f B "spi_xfer" 2 400 "int8(int8 stream,int8 data,int8 bits)" `425 
f N "spi_xfer" 2 401 ""
v L "stream" 2 401 "int8" `430 
v L "data" 2 401 "int16" `431 
v L "bits" 2 401 "int8" `432 
f B "spi_xfer" 2 401 "int16(int8 stream,int16 data,int8 bits)" `429 
f N "spi_xfer" 2 402 ""
v L "stream" 2 402 "int8" `434 
v L "data" 2 402 "int32" `435 
v L "bits" 2 402 "int8" `436 
f B "spi_xfer" 2 402 "int32(int8 stream,int32 data,int8 bits)" `433 
f N "spi_init" 2 403 ""
v L "baud" 2 403 "int32" `438 
f B "spi_init" 2 403 "void(int32 baud)" `437 
f N "spi_init" 2 404 ""
v L "stream" 2 404 "int8" `440 
v L "baud" 2 404 "int32" `441 
f B "spi_init" 2 404 "void(int8 stream,int32 baud)" `439 
f N "spi_speed" 2 405 ""
v L "baud" 2 405 "int32" `443 
f B "spi_speed" 2 405 "void(int32 baud)" `442 
f N "spi_speed" 2 406 ""
v L "stream" 2 406 "int8" `445 
v L "baud" 2 406 "int32" `446 
f B "spi_speed" 2 406 "void(int8 stream,int32 baud)" `444 
f N "spi_speed" 2 407 ""
v L "stream" 2 407 "int8" `448 
v L "baud" 2 407 "int32" `449 
v L "clock" 2 407 "int32" `450 
f B "spi_speed" 2 407 "void(int8 stream,int32 baud,int32 clock)" `447 
f N "spi_prewrite" 2 408 ""
v L "data" 2 408 "int8" `452 
f B "spi_prewrite" 2 408 "void(int8 data)" `451 
f N "spi_prewrite" 2 409 ""
v L "data" 2 409 "int16" `454 
f B "spi_prewrite" 2 409 "void(int16 data)" `453 
f N "spi_prewrite" 2 410 ""
v L "data" 2 410 "int32" `456 
f B "spi_prewrite" 2 410 "void(int32 data)" `455 
f N "spi_prewrite" 2 411 ""
v L "??65535" 2 411 "int8" `458 
v L "data" 2 411 "int8" `459 
f B "spi_prewrite" 2 411 "void(int8 ,int8 data)" `457 
f N "spi_prewrite" 2 412 ""
v L "??65535" 2 412 "int8" `461 
v L "data" 2 412 "int16" `462 
f B "spi_prewrite" 2 412 "void(int8 ,int16 data)" `460 
f N "spi_prewrite" 2 413 ""
v L "??65535" 2 413 "int8" `464 
v L "data" 2 413 "int32" `465 
f B "spi_prewrite" 2 413 "void(int8 ,int32 data)" `463 
f N "spi_xfer_in" 2 414 ""
f B "spi_xfer_in" 2 414 "int8()" `466 
f N "spi_xfer_in" 2 415 ""
f G "spi_xfer_in" 2 415 "int16(int8 bits)" `467 
f N "spi_xfer_in" 2 416 ""
f G "spi_xfer_in" 2 416 "int32(int8 bits)" `467 
f N "spi_xfer_in" 2 417 ""
v L "bits" 2 417 "int8" `468 
f B "spi_xfer_in" 2 417 "int8(int8 bits)" `467 
f N "spi_xfer_in" 2 418 ""
v L "bits" 2 418 "int8" `470 
f G "spi_xfer_in" 2 418 "int16(int8 bits,int8 bits)" `469 
f N "spi_xfer_in" 2 419 ""
v L "bits" 2 419 "int8" `470 
f G "spi_xfer_in" 2 419 "int32(int8 bits,int8 bits)" `469 
f N "spi_xfer_in" 2 420 ""
v L "stream" 2 420 "int8" `470 
v L "bits" 2 420 "int8" `471 
f B "spi_xfer_in" 2 420 "int8(int8 stream,int8 bits)" `469 
f N "spi_xfer_in" 2 421 ""
v L "stream" 2 421 "int8" `470 
v L "bits" 2 421 "int8" `474 
f G "spi_xfer_in" 2 421 "int16(int8 stream,int8 bits,int8 task)" `472 
f N "spi_xfer_in" 2 422 ""
v L "stream" 2 422 "int8" `470 
v L "bits" 2 422 "int8" `474 
f G "spi_xfer_in" 2 422 "int32(int8 stream,int8 bits,int8 task)" `472  "#use rtos() Prototypes:"
f N "rtos_run" 2 425 ""
f B "rtos_run" 2 425 "void(int8 stream,int8 bits,int8 task)" `472 
f N "rtos_yield" 2 426 ""
f B "rtos_yield" 2 426 "void(int8 bits,int8 task)" `473 
f N "rtos_enable" 2 427 ""
v L "task" 2 427 "int8" `475 
f B "rtos_enable" 2 427 "void(int8 task)" `474 
f N "rtos_disable" 2 428 ""
v L "task" 2 428 "int8" `477 
f B "rtos_disable" 2 428 "void(int8 task)" `476 
f N "rtos_terminate" 2 429 ""
f B "rtos_terminate" 2 429 "void()" `478 
f N "rtos_await" 2 430 ""
v L "flag" 2 430 "int8" `480 
f B "rtos_await" 2 430 "void(int8 flag)" `479 
f N "rtos_wait" 2 431 ""
v L "sem" 2 431 "int8" `482 
f B "rtos_wait" 2 431 "void(int8 sem)" `481 
f N "rtos_signal" 2 432 ""
v L "sem" 2 432 "int8" `484 
f B "rtos_signal" 2 432 "void(int8 sem)" `483 
f N "rtos_msg_send" 2 433 ""
v L "task" 2 433 "int8" `486 
v L "msg" 2 433 "int8" `487 
f B "rtos_msg_send" 2 433 "void(int8 task,int8 msg)" `485 
f N "rtos_msg_read" 2 434 ""
f B "rtos_msg_read" 2 434 "int8()" `488 
f N "rtos_msg_poll" 2 435 ""
f B "rtos_msg_poll" 2 435 "int8()" `489 
f N "rtos_overrun" 2 436 ""
v L "task" 2 436 "int8" `491 
f B "rtos_overrun" 2 436 "int8(int8 task)" `490 
f N "rtos_stats" 2 437 ""
v L "task" 2 437 "int8" `493 
v L "stat" 2 437 "*int8" `494 
f B "rtos_stats" 2 437 "void(int8 task,*int8 stat)" `492  "#use timer() Prototypes:"
f N "get_ticks" 2 440 ""
f B "get_ticks" 2 440 "int8()" `495 
f N "get_ticks" 2 441 ""
f G "get_ticks" 2 441 "int16(int8 stream)" `496 
f N "get_ticks" 2 442 ""
f G "get_ticks" 2 442 "int32(int8 stream)" `496 
f N "get_ticks" 2 443 ""
v L "stream" 2 443 "int8" `497 
f B "get_ticks" 2 443 "int8(int8 stream)" `496 
f N "get_ticks" 2 444 ""
v L "stream" 2 444 "int8" `499 
f G "get_ticks" 2 444 "int16(int8 stream)" `498 
f N "get_ticks" 2 445 ""
v L "stream" 2 445 "int8" `499 
f G "get_ticks" 2 445 "int32(int8 stream)" `498 
f N "set_ticks" 2 446 ""
v L "value" 2 446 "int8" `499 
f B "set_ticks" 2 446 "void(int8 value)" `498 
f N "set_ticks" 2 447 ""
v L "value" 2 447 "int16" `501 
f B "set_ticks" 2 447 "void(int16 value)" `500 
f N "set_ticks" 2 448 ""
v L "value" 2 448 "int32" `503 
f B "set_ticks" 2 448 "void(int32 value)" `502 
f N "set_ticks" 2 449 ""
v L "stream" 2 449 "int8" `505 
v L "value" 2 449 "int8" `506 
f B "set_ticks" 2 449 "void(int8 stream,int8 value)" `504 
f N "set_ticks" 2 450 ""
v L "stream" 2 450 "int8" `508 
v L "value" 2 450 "int16" `509 
f B "set_ticks" 2 450 "void(int8 stream,int16 value)" `507 
f N "set_ticks" 2 451 ""
v L "stream" 2 451 "int8" `511 
v L "value" 2 451 "int32" `512 
f B "set_ticks" 2 451 "void(int8 stream,int32 value)" `510  "#use pwm() Prototypes:"
f N "pwm_on" 2 454 ""
f B "pwm_on" 2 454 "void()" `513 
f N "pwm_on" 2 455 ""
v L "stream" 2 455 "int8" `515 
f B "pwm_on" 2 455 "void(int8 stream)" `514 
f N "pwm_off" 2 456 ""
f B "pwm_off" 2 456 "void()" `516 
f N "pwm_off" 2 457 ""
v L "stream" 2 457 "int8" `518 
f B "pwm_off" 2 457 "void(int8 stream)" `517 
f N "pwm_set_duty" 2 458 ""
v L "duty" 2 458 "int16" `520 
f B "pwm_set_duty" 2 458 "void(int16 duty)" `519 
f N "pwm_set_duty" 2 459 ""
v L "stream" 2 459 "int8" `522 
v L "duty" 2 459 "int16" `523 
f B "pwm_set_duty" 2 459 "void(int8 stream,int16 duty)" `521 
f N "pwm_set_duty_percent" 2 460 ""
v L "percent" 2 460 "int16" `525 
f B "pwm_set_duty_percent" 2 460 "void(int16 percent)" `524 
f N "pwm_set_duty_percent" 2 461 ""
v L "stream" 2 461 "int8" `527 
v L "percent" 2 461 "int16" `528 
f B "pwm_set_duty_percent" 2 461 "void(int8 stream,int16 percent)" `526 
f N "pwm_set_frequency" 2 462 ""
v L "frequency" 2 462 "int32" `530 
f B "pwm_set_frequency" 2 462 "void(int32 frequency)" `529 
f N "pwm_set_frequency" 2 463 ""
v L "stream" 2 463 "int8" `532 
v L "frequency" 2 463 "int32" `533 
f B "pwm_set_frequency" 2 463 "void(int8 stream,int32 frequency)" `531  "#use capture() Prototypes:"
f N "get_capture_time" 2 466 ""
f B "get_capture_time" 2 466 "int16()" `534 
f N "get_capture_time" 2 467 ""
v L "stream" 2 467 "int8" `536 
f B "get_capture_time" 2 467 "int16(int8 stream)" `535 
f N "get_capture_event" 2 468 ""
f B "get_capture_event" 2 468 "int8()" `537 
f N "get_capture_event" 2 469 ""
v L "stream" 2 469 "int8" `539 
f B "get_capture_event" 2 469 "int8(int8 stream)" `538  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 482 ""
v L "address" 2 482 "int16" `541 
f B "goto_address" 2 482 "void(int16 address)" `540 
f N "label_address" 2 483 ""
v L "label" 2 483 "int16" `543 
f B "label_address" 2 483 "int16(int16 label)" `542  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 490 "unsigned int8"
f N "read_eeprom" 2 493 ""
v L "address" 2 493 "int8" `545 
f B "read_eeprom" 2 493 "int8(int8 address)" `544 
f N "write_eeprom" 2 494 ""
v L "address" 2 494 "int8" `547 
v L "value" 2 494 "int8" `548 
f B "write_eeprom" 2 494 "void(int8 address,int8 value)" `546  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 501 ""
v L "interrupt" 2 501 "int32" `550 
f B "enable_interrupts" 2 501 "void(int32 interrupt)" `549 
f N "disable_interrupts" 2 502 ""
v L "interrupt" 2 502 "int32" `552 
f B "disable_interrupts" 2 502 "void(int32 interrupt)" `551 
f N "clear_interrupt" 2 503 ""
v L "interrupt" 2 503 "int32" `554 
f B "clear_interrupt" 2 503 "void(int32 interrupt)" `553 
f N "interrupt_active" 2 504 ""
v L "interrupt" 2 504 "int32" `556 
f B "interrupt_active" 2 504 "int8(int32 interrupt)" `555 
f N "interrupt_enabled" 2 505 ""
v L "interrupt" 2 505 "int32" `558 
f B "interrupt_enabled" 2 505 "int8(int32 interrupt)" `557 
f N "ext_int_edge" 2 506 ""
v L "source" 2 506 "int8" `560 
v L "edge" 2 506 "int8" `561 
f B "ext_int_edge" 2 506 "void(int8 source,int8 edge)" `559 
f N "jump_to_isr" 2 507 ""
v L "address" 2 507 "int16" `563 
f B "jump_to_isr" 2 507 "void(int16 address)" `562  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 509 "0x40"
d G "H_TO_L" 2 510 "0"
d G "GLOBAL" 2 512 "0x0BC0"
d G "PERIPH" 2 513 "0x0B40"
d G "INT_RTCC" 2 514 "0x000B20"
d G "INT_RB" 2 515 "0x00FF0B08"
d G "INT_EXT_L2H" 2 516 "0x50000B10"
d G "INT_EXT_H2L" 2 517 "0x60000B10"
d G "INT_EXT" 2 518 "0x000B10"
d G "INT_TBE" 2 519 "0x008C10"
d G "INT_RDA" 2 520 "0x008C20"
d G "INT_TIMER1" 2 521 "0x008C01"
d G "INT_TIMER2" 2 522 "0x008C02"
d G "INT_CCP1" 2 523 "0x008C04"
d G "INT_COMP" 2 524 "0x008C40"
d G "INT_TIMER0" 2 525 "0x000B20"
d G "INT_EEPROM" 2 526 "0x008C80"
D G "RF24_CS" 0 5 "PIN_A0" "RC1;  chipselect nRF24L01+"
D G "RF24_CE" 0 6 "PIN_A1" "RC2;  chipEnable nRF24L01+"
D G "RF24_IRQ" 0 7 "PIN_B0" "interrupt pin"
D G "DEVICE" 0 8 "0x31" "hex for '1' char."
D G "ENCENDER" 0 9 "0x41" "hex for 'A' char"
D G "alive" 0 13 "PIN_B3" "nrf.c"
D G "s_ad1" 3 11 "0xE4" "this is the remote station, so called slave"
D G "s_ad2" 3 12 "0xE4" "this is the remote station, so called slave"
D G "s_ad3" 3 13 "0xE4" "this is the remote station, so called slave"
D G "s_ad4" 3 14 "0xE4" "this is the remote station, so called slave"
D G "s_ad5" 3 15 "0xE4" "this is the remote station, so called slave"
D G "master_add1" 3 20 "0xE1" "this is the base station"
D G "master_add2" 3 21 "0xE2" "this is the base station"
D G "master_add3" 3 22 "0xE3" "this is the base station"
D G "master_add4" 3 23 "0xE4" "this is the base station"
D G "master_add5" 3 24 "0xE5" "this is the base station"
D G "PAY_LOAD_BYTES" 3 28 "16" "number in INTeger max 32 // number of bytes to transfer through RF"
V G "RF_RCV_DATA" 3 31 "int8[16]" `571  "RF_RCV_DATA this array holds the data received wirelessly"
V G "RF_TX_DATA" 3 32 "int8[16]" `572  "RF_TX_DATA you will push the data into it to send in wireless"
D G "W_REGISTER" 3 35 "0x20"
D G "R_RX_PAYLOAD" 3 36 "0x61"
D G "W_TX_PAYLOAD" 3 37 "0xa0"
D G "RF24_xfer" 3 40 "(xdata)   bb_xfer(xdata)" "Send/receive data through SPI"
D G "RTX_CSN_Low" 3 41 "()      output_low(RF24_CS)" "Controls bit Chipselect"
D G "RTX_CSN_High" 3 42 "()     output_high(RF24_CS)" "Controls bit Chipselect"
D G "RTX_CE_Low" 3 43 "()       output_low(RF24_CE)" "Controls bit Chipenable"
D G "RTX_CE_High" 3 44 "()      output_high(RF24_CE)" "Controls bit Chipenable"
V G "DATA_IN_RX" 3 48 "int1" `573 
D G "_STDLIB" 4 13 ""
D G "RAND_MAX" 4 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 4 26 "1"
T G "div_t" 4 34 "{sint8 quot,sint8 rem}" `577 
T G "ldiv_t" 4 39 "{sint16 quot,sint16 rem}" `581  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 22 "unsigned int8"
D G "wchar_t" 5 26 "char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 4 44 2 "FUNCTION"
C L "jump_to_isr" 4 47 1 "*"
C L "jump_to_isr" 4 47 1 "*"
F N "atoi" 4 51 ""
V L "s" 4 51 "*int8" `583 
f G "atoi" 4 51 "sint8(*int8 s)" `582  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 4 59 ""
V L "s" 4 59 "*int8" `585 
f G "atoi32" 4 59 "sint32(*int8 s)" `584  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 4 47 2 "FUNCTION"
F N "itoa" 4 80 ""
V L "num" 4 80 "sint32" `587 
V L "base" 4 80 "int8" `588 
V L "s" 4 80 "*int8" `589 
f G "itoa" 4 80 "*int8(sint32 num,int8 base,*int8 s)" `586  "Standard template: signed int16  atol(char * s)"
C L "itoa" 4 82 1 "*"
C L "itoa" 4 82 1 "*"
F N "atol" 4 86 ""
V L "s" 4 86 "*int8" `591 
f G "atol" 4 86 "sint16(*int8 s)" `590  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 4 88 1 "*"
C L "atol" 4 88 1 "*"
C L "atol" 4 88 1 "*"
C L "atol" 4 88 1 "*"
F N "strtol" 4 94 ""
V L "s" 4 94 "*int8" `593 
V L "endptr" 4 94 "*int8" `594 
V L "base" 4 94 "sint8" `595 
f G "strtol" 4 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `592  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 4 96 1 "*"
C L "strtol" 4 96 1 "*"
C L "strtol" 4 96 1 "*"
C L "strtol" 4 96 1 "*"
F N "strtoul" 4 102 ""
V L "s" 4 102 "*int8" `597 
V L "endptr" 4 102 "*int8" `598 
V L "base" 4 102 "sint8" `599 
f G "strtoul" 4 102 "int16(*int8 s,*int8 endptr,sint8 base)" `596  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 4 96 2 "FUNCTION"
C L "strtoul" 4 104 1 "*"
C L "strtoul" 4 104 1 "*"
C L "strtoul" 4 104 1 "*"
F N "strtof" 4 111 ""
V L "s" 4 111 "*int8" `601 
V L "endptr" 4 111 "??0 *" `602 
f G "strtof" 4 111 "float(*int8 s,??0 * endptr)" `600  "provided for compatibility"
D G "strtof48" 4 117 "(s,e) strtof(s, e)"
D G "strtod" 4 118 "(s,e) strtof(s, e)"
C L "strtof" 4 104 1 "FUNCTION"
C L "strtof" 4 121 1 "*"
D G "atof" 4 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 4 121 1 "FUNCTION"
C L "strtof" 4 144 1 "*"
C L "strtof" 4 144 1 "*"
C L "strtof" 4 144 1 "*"
F N "atoe" 4 150 ""
V L "s" 4 150 "*int8" `605 
f G "atoe" 4 150 "float(*int8 s)" `604  "Pseudo-random sequence generation functions"
C L "atoe" 4 144 1 "FUNCTION"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
F N "rand" 4 170 ""
f G "rand" 4 170 "int16()" `606  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
F N "srand" 4 192 ""
V L "seed" 4 192 "int32" `608 
f G "srand" 4 192 "void(int32 seed)" `607  "Memory management functions"
C L "srand" 4 172 3 "FUNCTION"
F N "system" 4 206 ""
V L "string" 4 206 "*int8" `610 
f G "system" 4 206 "sint8(*int8 string)" `609  "Searching and sorting utilities"
C L "system" 4 172 1 "FUNCTION"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 4 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
D G "labs" 4 250 "abs"
F N "div" 4 252 ""
V L "numer" 4 252 "sint8" `612 
V L "denom" 4 252 "sint8" `613 
f G "div" 4 252 "div_t(sint8 numer,sint8 denom)" `611 
F N "ldiv" 4 253 ""
V L "numer" 4 253 "sint16" `615 
V L "denom" 4 253 "sint16" `616 
f G "ldiv" 4 253 "ldiv_t(sint16 numer,sint16 denom)" `614  "Multibyte character functions"
C L "ldiv" 4 230 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
D G "_STRING" 6 12 ""
C L "ldiv" 5 2 7 "FUNCTION"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 6 19 10 "FUNCTION"
F N "memmove" 6 34 ""
V L "s1" 6 34 "*void" `618 
V L "s2" 6 34 "*void" `619 
V L "n" 6 34 "int8" `620 
F G "memmove" 6 35 "*int8(*void s1,*void s2,int8 n)" `617 
V L "sc1" 6 36 "*int8" `621 
V L "sc2" 6 37 "*int8" `622 
D G "strcopy" 6 54 "strcpy"
F N "strncpy" 6 61 ""
V L "s1" 6 61 "*int8" `624 
V L "s2" 6 61 "*int8" `625 
V L "n" 6 61 "int8" `626 
F G "strncpy" 6 62 "*int8(*int8 s1,*int8 s2,int8 n)" `623 
V L "s" 6 63 "*int8" `627 
F N "strcat" 6 78 ""
V L "s1" 6 78 "*int8" `629 
V L "s2" 6 78 "*int8" `630 
F G "strcat" 6 79 "*int8(*int8 s1,*int8 s2)" `628 
V L "s" 6 80 "*int8" `631 
F N "strncat" 6 96 ""
V L "s1" 6 96 "*int8" `633 
V L "s2" 6 96 "*int8" `634 
V L "n" 6 96 "int8" `635 
F G "strncat" 6 97 "*int8(*int8 s1,*int8 s2,int8 n)" `632 
V L "s" 6 98 "*int8" `636 
C L "memcmp" 6 19 3 "FUNCTION"
F N "memcmp" 6 120 ""
V L "s1" 6 120 "*void" `638 
V L "s2" 6 120 "*void" `639 
V L "n" 6 120 "int8" `640 
F G "memcmp" 6 121 "sint8(*void s1,*void s2,int8 n)" `637 
V L "su1" 6 122 "*int8" `641 
V L "su2" 6 122 "*int8" `642 
C L "strcmp" 6 19 2 "FUNCTION"
F N "strcmp" 6 134 ""
V L "s1" 6 134 "*int8" `644 
V L "s2" 6 134 "*int8" `645 
F G "strcmp" 6 135 "sint8(*int8 s1,*int8 s2)" `643 
C L "strcoll" 6 19 2 "FUNCTION"
F N "strcoll" 6 144 ""
V L "s1" 6 144 "*int8" `647 
V L "s2" 6 144 "*int8" `648 
F G "strcoll" 6 145 "sint8(*int8 s1,*int8 s2)" `646 
C L "strncmp" 6 19 4 "FUNCTION"
F N "strncmp" 6 157 ""
V L "s1" 6 157 "*int8" `650 
V L "s2" 6 157 "*int8" `651 
V L "n" 6 157 "int8" `652 
F G "strncmp" 6 158 "sint8(*int8 s1,*int8 s2,int8 n)" `649 
C L "strxfrm" 6 19 4 "FUNCTION"
F N "strxfrm" 6 170 ""
V L "s1" 6 170 "*int8" `654 
V L "s2" 6 170 "*int8" `655 
V L "n" 6 170 "int8" `656 
F G "strxfrm" 6 171 "int8(*int8 s1,*int8 s2,int8 n)" `653 
V L "c" 6 172 "int8" `657 
V L "n1" 6 173 "int8" `658 
C L "strxfrm" 6 19 1 "FUNCTION"
F N "memchr" 6 201 ""
V L "s" 6 201 "*void" `660 
V L "c" 6 201 "int8" `661 
V L "n" 6 201 "int8" `662 
F G "memchr" 6 202 "*int8(*void s,int8 c,int8 n)" `659 
V L "uc" 6 203 "int8" `663 
V L "su" 6 204 "*int8" `664 
F N "strchr" 6 215 ""
V L "s" 6 215 "*int8" `666 
V L "c" 6 215 "int8" `667 
F G "strchr" 6 216 "*int8(*int8 s,int8 c)" `665 
C L "strcspn" 6 19 4 "FUNCTION"
F N "strcspn" 6 227 ""
V L "s1" 6 227 "*int8" `669 
V L "s2" 6 227 "*int8" `670 
F G "strcspn" 6 228 "int8(*int8 s1,*int8 s2)" `668 
V L "sc1" 6 229 "*int8" `671 
V L "sc2" 6 229 "*int8" `672 
F N "strpbrk" 6 242 ""
V L "s1" 6 242 "*int8" `674 
V L "s2" 6 242 "*int8" `675 
F G "strpbrk" 6 243 "*int8(*int8 s1,*int8 s2)" `673 
V L "sc1" 6 244 "*int8" `676 
V L "sc2" 6 244 "*int8" `677 
F N "strrchr" 6 257 ""
V L "s" 6 257 "*int8" `679 
V L "c" 6 257 "int8" `680 
F G "strrchr" 6 258 "*int8(*int8 s,int8 c)" `678 
V L "p" 6 259 "*int8" `681 
C L "strspn" 6 19 2 "FUNCTION"
F N "strspn" 6 272 ""
V L "s1" 6 272 "*int8" `683 
V L "s2" 6 272 "*int8" `684 
F G "strspn" 6 273 "int8(*int8 s1,*int8 s2)" `682 
V L "sc1" 6 274 "*int8" `685 
V L "sc2" 6 274 "*int8" `686 
F N "strstr" 6 291 ""
V L "s1" 6 291 "*int8" `688 
V L "s2" 6 291 "*int8" `689 
F G "strstr" 6 292 "*int8(*int8 s1,*int8 s2)" `687 
V L "s" 6 293 "*int8" `690 
V L "t" 6 293 "*int8" `691 
C L "strlen" 6 19 2 "FUNCTION"
F N "strlen" 6 318 ""
V L "s" 6 318 "*int8" `693 
F G "strlen" 6 319 "int8(*int8 s)" `692 
V L "sc" 6 320 "*int8" `694 
F N "strtok" 6 341 ""
V L "s1" 6 341 "*int8" `696 
V L "s2" 6 341 "*int8" `697 
F G "strtok" 6 342 "*int8(*int8 s1,*int8 s2)" `695 
V L "beg" 6 343 "*int8" `698 
V L "end" 6 343 "*int8" `699 
V L "save" 6 344 "*int8" `700 
C L "stricmp" 6 19 6 "FUNCTION"
F N "stricmp" 6 392 ""
V L "s1" 6 392 "*int8" `702 
V L "s2" 6 392 "*int8" `703 
F G "stricmp" 6 393 "sint8(*int8 s1,*int8 s2)" `701 
F N "strlwr" 6 406 ""
V L "s" 6 406 "*int8" `707 
F G "strlwr" 6 407 "*int8(*int8 s)" `706 
V L "p" 6 408 "*int8" `708 
F N "strupr" 6 420 ""
V L "s" 6 420 "*int8" `710 
F G "strupr" 6 421 "*int8(*int8 s)" `709 
V L "p" 6 422 "*int8" `711 
F N "div" 4 275 ""
V L "numer" 4 275 "sint8" `612 
V L "denom" 4 275 "sint8" `714 
F G "div" 4 276 "div_t(sint8 numer,sint8 denom)" `611 
V L "val" 4 277 "div_t" `712 
F N "ldiv" 4 283 ""
V L "numer" 4 283 "sint16" `615 
V L "denom" 4 283 "sint16" `721 
F G "ldiv" 4 284 "ldiv_t(sint16 numer,sint16 denom)" `614 
V L "val" 4 285 "ldiv_t" `719 
F N "atoe" 4 362 ""
V L "s" 4 362 "*int8" `727 
F G "atoe" 4 363 "float(*int8 s)" `604 
V L "pow10" 4 364 "float" `726 
V L "result" 4 365 "float" `727 
V L "sign" 4 366 "int8" `728 
V L "expsign" 4 367 "int8" `729 
V L "c" 4 368 "int8" `730 
V L "ptr" 4 369 "int8" `731 
V L "i" 4 370 "int8" `732 
V L "exp" 4 371 "float" `733 
V L "expcnt" 4 372 "int8" `734 
C L "atoe" 4 398 1 "FUNCTION"
F N "atoi" 4 430 ""
V L "s" 4 430 "*int8" `747 
F G "atoi" 4 431 "sint8(*int8 s)" `582 
V L "result" 4 432 "sint8" `746 
V L "sign" 4 433 "int8" `747 
V L "base" 4 433 "int8" `748 
V L "index" 4 433 "int8" `749 
V L "c" 4 434 "int8" `750 
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
F N "atol" 4 499 ""
V L "s" 4 499 "*int8" `752 
F G "atol" 4 500 "sint16(*int8 s)" `590 
V L "result" 4 501 "sint16" `751 
V L "sign" 4 502 "int8" `752 
V L "base" 4 502 "int8" `753 
V L "index" 4 502 "int8" `754 
V L "c" 4 503 "int8" `755 
C L "atol" 4 398 1 "FUNCTION"
C L "atol" 4 398 1 "FUNCTION"
C L "atol" 4 398 1 "FUNCTION"
C L "atol" 4 398 1 "FUNCTION"
C L "mult_with10" 4 398 1 "FUNCTION"
F N "mult_with10" 4 566 ""
V L "num" 4 566 "int32" `757 
F G "mult_with10" 4 567 "sint32(int32 num)" `756 
F N "atoi32" 4 572 ""
V L "s" 4 572 "*int8" `759 
F G "atoi32" 4 573 "sint32(*int8 s)" `584 
V L "result" 4 574 "sint32" `758 
V L "sign" 4 575 "int8" `759 
V L "base" 4 575 "int8" `760 
V L "index" 4 575 "int8" `761 
V L "c" 4 576 "int8" `762 
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
F N "itoa" 4 771 ""
V L "num" 4 771 "sint32" `587 
V L "base" 4 771 "int8" `588 
V L "s" 4 771 "*int8" `766 
F G "itoa" 4 772 "*int8(sint32 num,int8 base,*int8 s)" `586 
V L "temp" 4 773 "int32" `763 
V L "i" 4 774 "int8" `764 
V L "sign" 4 774 "int8" `765 
V L "cnt" 4 774 "int8" `766 
V L "c" 4 775 "int8" `767 
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
F N "strtof" 4 886 ""
V L "s" 4 886 "*int8" `601 
V L "endptr" 4 886 "??0 *" `776 
F G "strtof" 4 887 "float(*int8 s,??0 * endptr)" `600 
V L "pow10" 4 888 "float" `774 
V L "result" 4 889 "float" `775 
V L "skip" 4 890 "int1" `776 
V L "sign" 4 890 "int1" `777 
V L "point" 4 890 "int1" `778 
V L "c" 4 891 "int8" `779 
V L "ptr" 4 892 "int8" `780 
F N "strtoul" 4 1104 ""
V L "s" 4 1104 "*int8" `597 
V L "endptr" 4 1104 "*int8" `598 
V L "base" 4 1104 "sint8" `785 
F G "strtoul" 4 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `596 
V L "sc" 4 1106 "*int8" `782 
V L "s1" 4 1106 "*int8" `783 
V L "sd" 4 1106 "*int8" `784 
V L "x" 4 1107 "int16" `785 
V L "sign" 4 1108 "int8" `786 
V L "digits" 4 1109 "int8[1]" `787 
C L "strtoul" 4 398 1 "FUNCTION"
C L "strtoul" 4 398 1 "FUNCTION"
C L "strtoul" 4 398 1 "FUNCTION"
F N "strtol" 4 1166 ""
V L "s" 4 1166 "*int8" `593 
V L "endptr" 4 1166 "*int8" `594 
V L "base" 4 1166 "sint8" `792 
F G "strtol" 4 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `592 
V L "sc" 4 1168 "*int8" `789 
V L "s1" 4 1168 "*int8" `790 
V L "sd" 4 1168 "*int8" `791 
V L "x" 4 1169 "sint16" `792 
V L "sign" 4 1170 "int8" `793 
V L "digits" 4 1171 "int8[1]" `794 
C L "strtol" 4 398 1 "FUNCTION"
C L "strtol" 4 398 1 "FUNCTION"
C L "strtol" 4 398 1 "FUNCTION"
F N "system" 4 1229 ""
V L "string" 4 1229 "*int8" `797 
F G "system" 4 1230 "sint8(*int8 string)" `609 
F N "mblen" 4 1234 ""
V L "s" 4 1234 "*int8" `797 
V L "n" 4 1234 "int8" `798 
F G "mblen" 4 1235 "int8(*int8 s,int8 n)" `796 
F N "mbtowc" 4 1239 ""
V L "pwc" 4 1239 "*int8" `800 
V L "s" 4 1239 "*int8" `801 
V L "n" 4 1239 "int8" `802 
F G "mbtowc" 4 1240 "int8(*int8 pwc,*int8 s,int8 n)" `799 
F N "wctomb" 4 1245 ""
V L "s" 4 1245 "*int8" `804 
V L "wchar" 4 1245 "int8" `805 
F G "wctomb" 4 1246 "int8(*int8 s,int8 wchar)" `803 
F N "mbstowcs" 4 1251 ""
V L "pwcs" 4 1251 "*int8" `807 
V L "s" 4 1251 "*int8" `808 
V L "n" 4 1251 "int8" `809 
F G "mbstowcs" 4 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `806 
F N "wcstombs" 4 1257 ""
V L "s" 4 1257 "*int8" `811 
V L "pwcs" 4 1257 "*int8" `812 
V L "n" 4 1257 "int8" `813 
F G "wcstombs" 4 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `810 
V G "_Randseed" 4 1267 "int32" `814 
F N "rand" 4 1269 ""
F G "rand" 4 1270 "int16()" `606 
F N "srand" 4 1275 ""
V L "seed" 4 1275 "int32" `819 
F G "srand" 4 1276 "void(int32 seed)" `607 
F N "*_Cmpfun" 4 1285 ""
V L "p1" 4 1285 "*int8" `819 
V L "p2" 4 1285 "*int8" `820 
T G "*_Cmpfun" 4 1285 "sint8(*int8 p1,*int8 p2)" `818 
F N "qsort" 4 1292 ""
V L "qdata" 4 1292 "*int8" `823 
V L "qitems" 4 1292 "int8" `824 
V L "qsize" 4 1292 "int8" `825 
V L "cmp" 4 1292 "_Cmpfun" `826 
F G "qsort" 4 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `822 
V L "m" 4 1293 "int8" `827 
V L "j" 4 1293 "int8" `828 
V L "i" 4 1293 "int8" `829 
V L "l" 4 1293 "int8" `830 
V L "done" 4 1294 "int1" `831 
V L "t" 4 1295 "int8[16]" `832 
F N "bsearch" 4 1320 ""
V L "key" 4 1320 "*int8" `835 
V L "base" 4 1320 "*int8" `836 
V L "num" 4 1320 "int8" `837 
V L "width" 4 1320 "int8" `838 
V L "cmp" 4 1320 "_Cmpfun" `839 
F G "bsearch" 4 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `834 
V L "p" 4 1322 "*int8" `840 
V L "q" 4 1322 "*int8" `841 
V L "n" 4 1323 "int8" `842 
V L "pivot" 4 1324 "int8" `843 
V L "val" 4 1325 "sint8" `844 
C L "bsearch" 4 398 1 "FUNCTION"
F N "pulse_CSN" 3 54 ""
F G "pulse_CSN" 3 55 "void()" `845 
F N "init_rf" 3 61 ""
F G "init_rf" 3 61 "void()" `846 
F N "flush_rx" 3 66 ""
F G "flush_rx" 3 66 "void()" `847  "write it at uC startup"
C L "flush_rx" 3 69 1 "FUNCTION"
F N "configure_tx" 3 73 ""
F G "configure_tx" 3 73 "void()" `848 
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
C L "configure_tx" 3 69 1 "FUNCTION"
F N "MAX_RT" 3 115 ""
F G "MAX_RT" 3 115 "int8()" `849 
V L "temp_fifo_register" 3 117 "int8" `850 
F N "rf_data_sent" 3 132 ""
F G "rf_data_sent" 3 132 "int8()" `851 
V L "temp_fifo_register" 3 134 "int8" `852 
F N "send_shock_burst" 3 148 ""
V L "rf_x1" 3 148 "int8" `854 
V L "rf_x2" 3 148 "int8" `855 
V L "rf_x3" 3 148 "int8" `856 
V L "rf_x4" 3 148 "int8" `857 
V L "rf_x5" 3 148 "int8" `858 
F G "send_shock_burst" 3 148 "int8(int8 rf_x1,int8 rf_x2,int8 rf_x3,int8 rf_x4,int8 rf_x5)" `853  "takes total 200 ms approx"
V L "nrf_i" 3 150 "int8" `859 
C L "send_shock_burst" 3 69 1 "FUNCTION"
C L "send_shock_burst" 3 69 2 "FUNCTION"
C L "send_shock_burst" 3 69 1 "FUNCTION"
C L "send_shock_burst" 3 69 1 "FUNCTION"
C L "send_shock_burst" 3 69 1 "FUNCTION"
F N "rf_read_Data" 3 208 ""
F G "rf_read_Data" 3 209 "void()" `860 
V L "rf_i" 3 210 "int8" `861 
C L "rf_read_Data" 3 69 1 "FUNCTION"
C L "rf_read_Data" 3 69 1 "FUNCTION"
C L "rf_read_Data" 3 69 1 "FUNCTION"
C L "rf_read_Data" 3 69 1 "FUNCTION"
C L "rf_read_Data" 3 69 1 "FUNCTION"
F N "configure_RX" 3 230 ""
V L "rf_slave_addr1" 3 230 "int8" `863 
V L "rf_slave_addr2" 3 230 "int8" `864 
V L "rf_slave_addr3" 3 230 "int8" `865 
V L "rf_slave_addr4" 3 230 "int8" `866 
V L "rf_slave_addr5" 3 230 "int8" `867 
F G "configure_RX" 3 231 "void(int8 rf_slave_addr1,int8 rf_slave_addr2,int8 rf_slave_addr3,int8 rf_slave_addr4,int8 rf_slave_addr5)" `862 
V L "i_rf_rx" 3 232 "int8" `868 
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
C L "configure_RX" 3 69 1 "FUNCTION"
F N "data_in_rf" 3 285 ""
F G "data_in_rf" 3 285 "int8()" `869 
V L "temp_fifo_register" 3 287 "int8" `870 
C L "data_in_rf" 3 69 1 "FUNCTION"
V G "c" 0 18 "int8" `871 
F N "MAIN" 0 19 ""
F G "MAIN" 0 20 "void()" `872 
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
C L "MAIN" 0 22 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "spi_xfer" 0 3
